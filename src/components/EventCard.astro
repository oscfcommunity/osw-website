---
import type { CollectionEntry } from 'astro:content';

interface Props {
  event: CollectionEntry<'events'>;
  featured?: boolean;
}

const { event, featured = false } = Astro.props;
const { data } = event;

// Format date
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  }).format(new Date(date));
};

// Format event type for display
const formatEventType = (type: string) => {
  return type.charAt(0).toUpperCase() + type.slice(1);
};

// Get status color
const getStatusColor = (status: string) => {
  switch (status) {
    case 'upcoming':
      return 'badge-success';
    case 'ongoing':
      return 'badge-warning';
    case 'completed':
      return 'badge-neutral';
    case 'cancelled':
      return 'badge-error';
    default:
      return 'badge-ghost';
  }
};

// Get event type color
const getEventTypeColor = (type: string) => {
  switch (type) {
    case 'workshop':
      return 'badge-primary';
    case 'meetup':
      return 'badge-secondary';
    case 'hackathon':
      return 'badge-accent';
    case 'conference':
      return 'badge-info';
    case 'webinar':
      return 'badge-success';
    case 'networking':
      return 'badge-warning';
    default:
      return 'badge-ghost';
  }
};

// Check if event is happening soon (within next 7 days)
const isHappeningSoon = () => {
  const eventDate = new Date(data.date);
  const now = new Date();
  const sevenDaysFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
  return eventDate > now && eventDate <= sevenDaysFromNow;
};
---

<div
  class={`card bg-base-100 shadow-xl hover:shadow-2xl transition-all duration-300 ${featured ? 'ring-2 ring-primary ring-offset-2 ring-offset-base-100' : ''}`}
>
  {/* Event Image */}
  {
    data.coverImage && (
      <figure class="relative">
        <img
          src={data.coverImage}
          alt={data.title}
          class="w-full h-48 object-cover"
        />
        {featured && (
          <div class="absolute top-4 left-4">
            <div class="badge badge-primary badge-lg font-bold">Featured</div>
          </div>
        )}
        {isHappeningSoon() && data.status === 'upcoming' && (
          <div class="absolute top-4 right-4">
            <div class="badge badge-warning badge-lg font-bold animate-pulse">
              Soon!
            </div>
          </div>
        )}
      </figure>
    )
  }

  <div class="card-body">
    {/* Event Type and Status Badges */}
    <div class="flex flex-wrap gap-2 mb-2">
      <div class={`badge ${getEventTypeColor(data.eventType)} badge-outline`}>
        {formatEventType(data.eventType)}
      </div>
      <div class={`badge ${getStatusColor(data.status)}`}>
        {data.status.charAt(0).toUpperCase() + data.status.slice(1)}
      </div>
    </div>

    {/* Event Title */}
    <h2 class="card-title text-xl mb-2 line-clamp-2">
      {data.title}
    </h2>

    {/* Event Description */}
    <p class="text-base-content/70 text-sm mb-4 line-clamp-3">
      {data.description}
    </p>

    {/* Event Details */}
    <div class="space-y-2 mb-4">
      {/* Date and Time */}
      <div class="flex items-center gap-2 text-sm">
        <svg
          class="w-4 h-4 text-base-content/50"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
          ></path>
        </svg>
        <span class="text-base-content/80">
          {formatDate(data.date)}
        </span>
      </div>

      {/* Location */}
      <div class="flex items-center gap-2 text-sm">
        <svg
          class="w-4 h-4 text-base-content/50"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
          ></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
        <span class="text-base-content/80 truncate">
          {data.location}
        </span>
      </div>

      {/* Organizers */}
      {
        data.organizers && data.organizers.length > 0 && (
          <div class="flex items-center gap-2 text-sm">
            <svg
              class="w-4 h-4 text-base-content/50"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
              />
            </svg>
            <span class="text-base-content/80 truncate">
              {data.organizers.slice(0, 2).join(', ')}
              {data.organizers.length > 2 && ` +${data.organizers.length - 2}`}
            </span>
          </div>
        )
      }

      {/* Max Participants */}
      {
        data.maxParticipants && (
          <div class="flex items-center gap-2 text-sm">
            <svg
              class="w-4 h-4 text-base-content/50"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
              />
            </svg>
            <span class="text-base-content/80">
              Max {data.maxParticipants} participants
            </span>
          </div>
        )
      }
    </div>

    {/* Tags */}
    {
      data.tags && data.tags.length > 0 && (
        <div class="flex flex-wrap gap-1 mb-4">
          {data.tags.slice(0, 3).map(tag => (
            <span class="badge badge-ghost badge-sm">{tag}</span>
          ))}
          {data.tags.length > 3 && (
            <span class="badge badge-ghost badge-sm">
              +{data.tags.length - 3}
            </span>
          )}
        </div>
      )
    }

    {/* Action Buttons */}
    <div class="card-actions justify-between items-center mt-auto">
      <a href={`/events/${event.slug}`} class="btn btn-primary btn-sm">
        Learn More
      </a>

      <div class="flex gap-2">
        {
          data.registrationLink && data.status === 'upcoming' && (
            <a
              href={data.registrationLink}
              target="_blank"
              rel="noopener noreferrer"
              class="btn btn-outline btn-success btn-sm"
            >
              Register
            </a>
          )
        }

        {
          data.status === 'completed' &&
            data.resources &&
            data.resources.length > 0 && (
              <a
                href={`/events/${event.slug}#resources`}
                class="btn btn-outline btn-info btn-sm"
              >
                Resources
              </a>
            )
        }
      </div>
    </div>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
